dataset = "GLA02"
controls = c("Anti-human IgG", "EBNA1", "Bare-bead","His6ABP")
for (file in list.files(file.path("scripts", "backend"))){
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
setwd("M:/PhD/01_xmap_autoimmune_profiling/01_code/xmap_biomarkers")
source(file.path("scripts", "importer.R"))
### Pipeline
import(dataset)
stage_1(I01_Import, "P01_Preprocessed")
### Pipeline
import(dataset)
for (file in list.files(file.path("scripts", "backend"))){
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
### Pipeline
import(dataset)
dataset = "GLA02"
controls = c("Anti-human IgG", "EBNA1", "Bare-bead","His6ABP")
for (file in list.files(file.path("scripts", "backend"))){
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
### Pipeline
import(dataset)
stage_1(I01_Import, "P01_Preprocessed")
stage_2(P01_Preprocessed, "P02_Merged")
stage_3(P02_Merged, "P03_Transformed")
#export_excel(P03_Transformed)
#Report with good names
report = reports_P03_Transformed_bcrsn$Set_3_limma
anti_names = row.names((report))
gene_names = unname(replace_antigen_names(anti_names))
report["Gene_Names"] = gene_names
#ROC with P.Value 0.1
fancy_roc(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, validation = "LOOCV")
roc_breakdown = roc_curve(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, validation = "LOOCV", stepwise = TRUE)
#Heatmap
lim = limma_subset(P03_Transformed$Set_3, mode="raw")
#Heatmap
lim = limma_subset(P03_Transformed$Set_3, mode="raw")
View(limma_subset)
#Heatmap
lim = limma_subset(P03_Transformed$Set_3, mode="raw")
P03_Transformed$Set_3
View(limma_subset)
limma_subset(P03_Transformed$Set_3, mode="raw")
#Heatmap
df = P03_Transformed$Set_3
lim <- limma_funct(df)
if (mode == "default"){
lim_sigs <- row.names(lim[lim$adj.P.Val<P,])
lim_data <- cbind(df[1:2],df[lim_sigs])
}
mode = "default"
if (mode == "default"){
lim_sigs <- row.names(lim[lim$adj.P.Val<P,])
lim_data <- cbind(df[1:2],df[lim_sigs])
}
P=0.05
n=15
if (mode == "default"){
lim_sigs <- row.names(lim[lim$adj.P.Val<P,])
lim_data <- cbind(df[1:2],df[lim_sigs])
}
else if (mode == "top"){
limma_subset(df)
dataset = "GLA02"
controls = c("Anti-human IgG", "EBNA1", "Bare-bead","His6ABP")
for (file in list.files(file.path("scripts", "backend"))){
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
### Pipeline
import(dataset)
stage_1(I01_Import, "P01_Preprocessed")
stage_2(P01_Preprocessed, "P02_Merged")
stage_3(P02_Merged, "P03_Transformed")
#export_excel(P03_Transformed)
#Report with good names
report = reports_P03_Transformed_bcrsn$Set_3_limma
anti_names = row.names((report))
gene_names = unname(replace_antigen_names(anti_names))
report["Gene_Names"] = gene_names
#ROC with P.Value 0.1
fancy_roc(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, validation = "LOOCV")
#Heatmap
lim = limma_subset(P03_Transformed$Set_3, mode="raw")
dataset = "GLA02"
controls = c("Anti-human IgG", "EBNA1", "Bare-bead","His6ABP")
for (file in list.files(file.path("scripts", "backend"))){
print(file)
source(file.path("scripts", "backend", file))
}
source(file.path("scripts", "importer.R"))
#Heatmap
lim = limma_subset(P03_Transformed$Set_3, mode="raw")
names = replace_antigen_names(colnames(lim[-1:-2]))
colnames(lim)[-1:-2]<- unname(names)
pp_heatmap(lim)
#LR and ROC
logit = roc_curve(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, stepwise = FALSE, validation = "LOOCV")
coefficients <- coef(logit$logistic_regression$logistic_model)
equation <- paste("logit(p) = ", round(coefficients[1], 3), "+", paste(round(coefficients[-1], 3), "* x", names(coefficients)[-1], collapse = " + "))
equation
coefficients_BR <- coef(logit_BR$logistic_regression$logistic_model)
logit_BR = roc_curve(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, stepwise = TRUE, validation = "LOOCV")
coefficients_BR <- coef(logit_BR$logistic_regression$logistic_model)
equation_BR <- paste("logit(p) = ", round(coefficients_BR[1], 3), "+", paste(round(coefficients_BR[-1], 3), "* x", names(coefficients_BR)[-1], collapse = " + "))
equation_BR
equation_BR <- paste("logit(p) = ", round(coefficients_BR[1], 3), "+", paste(round(coefficients_BR[-1], 3), "*", names(coefficients_BR)[-1], collapse = " + "))
equation_BR
analyte_names <- names(coefficients)[-1]
unname(replace_antigen_names(analyte_names))
fancy_roc(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, validation = "LOOCV")
fancy_roc_2(P03_Transformed$Set_3, report = reports_P03_Transformed_bcrsn$Set_3_limma, validation = "LOOCV")
msigdb_workflow
View(msigdb_workflow)
top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
top_genes <- fill_analyte_info(top_genes)
reports_P03_Transformed_bcrsn$Set_3_limma
msigdb_workflow <- function(signif.genes, category = "C2") {
library(msigdbr)
library(ggplot2)
msigdb_data <- msigdbr(species = "Homo sapiens", category = category)
signif.genes <- reports_P03_Transformed_bcrsn$Set_3_limma
top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
top_genes <- fill_analyte_info(top_genes)
top_genes <- top_genes$Gene.name
msigdb_genes = select(msigdb_data, gs_name, gene_symbol)
enrich_msigdb <- enricher(top_genes, TERM2GENE = msigdb_genes)
enrich_msigdb_df <- enrich_msigdb@result %>%
separate(BgRatio, into=c("size.term","size.category"), sep="/") %>%
separate(GeneRatio, into=c("size.overlap.term", "size.overlap.category"), sep="/") %>%
mutate_at(vars("size.term","size.category", "size.overlap.term","size.overlap.category"), as.numeric) %>%
mutate("k.K"=size.overlap.term/size.term)
enrich_plot <- enrich_msigdb_df %>%
filter(p.adjust <= 0.05) %>%
ggplot(aes(x=reorder(Description, k.K), y=k.K)) +
geom_col() +
theme_classic() +
coord_flip() +
labs(y="Significant genes in set / Total genes in set \nk/K", x="Gene set",
title = paste("Differentially expressed genes enriched in", category, "Gene sets (P<0.05)"))
return(list(data = enrich_msigdb_df, plot = enrich_plot))
}
msigdb_workflow <- function(signif.genes, category = "C2") {
library(msigdbr)
library(ggplot2)
msigdb_data <- msigdbr(species = "Homo sapiens", category = category)
#signif.genes <- reports_P03_Transformed_bcrsn$Set_3_limma
top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
top_genes <- fill_analyte_info(top_genes)
top_genes <- top_genes$Gene.name
msigdb_genes = select(msigdb_data, gs_name, gene_symbol)
enrich_msigdb <- enricher(top_genes, TERM2GENE = msigdb_genes)
enrich_msigdb_df <- enrich_msigdb@result %>%
separate(BgRatio, into=c("size.term","size.category"), sep="/") %>%
separate(GeneRatio, into=c("size.overlap.term", "size.overlap.category"), sep="/") %>%
mutate_at(vars("size.term","size.category", "size.overlap.term","size.overlap.category"), as.numeric) %>%
mutate("k.K"=size.overlap.term/size.term)
enrich_plot <- enrich_msigdb_df %>%
filter(p.adjust <= 0.05) %>%
ggplot(aes(x=reorder(Description, k.K), y=k.K)) +
geom_col() +
theme_classic() +
coord_flip() +
labs(y="Significant genes in set / Total genes in set \nk/K", x="Gene set",
title = paste("Differentially expressed genes enriched in", category, "Gene sets (P<0.05)"))
return(list(data = enrich_msigdb_df, plot = enrich_plot))
}
#GSEA
sig_adj = reports_P03_Transformed_bcrsn$Set_3_limma[reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val<0.05]
View(sig_adj)
#GSEA
sig_adj = reports_P03_Transformed_bcrsn$Set_3_limma[reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val<0.05]
class(reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val)
print(reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val)
sig_adj = reports_P03_Transformed_bcrsn$Set_3_limma[reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val < 0.05]
sig_adj
class(reports_P03_Transformed_bcrsn$Set_3_limma$adj.P.Val)
sig_adj <- reports_P03_Transformed_bcrsn$Set_3_limma %>%
filter(adj.P.Val < 0.05)
sig_adj
C2 = msigdb_workflow(sig_adj, category = "C2")
C3 = msigdb_workflow(sig_adj, category = "C3")
C2$plot
C3$plot
C2 = msigdb_workflow(reports_P03_Transformed_bcrsn$Set_3_limma, category = "C2")
C2$plot
C2 = msigdb_workflow(sig_adj, category = "C2")
C2$plot
#signif.genes <- reports_P03_Transformed_bcrsn$Set_3_limma
top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
#signif.genes <- reports_P03_Transformed_bcrsn$Set_3_limma
#top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
top_genes <- signif.genes[order(signif.genes$adj.P.Val),]
msigdb_workflow <- function(signif.genes, category = "C2") {
library(msigdbr)
library(ggplot2)
msigdb_data <- msigdbr(species = "Homo sapiens", category = category)
#signif.genes <- reports_P03_Transformed_bcrsn$Set_3_limma
#top_genes <- head(signif.genes[order(signif.genes$adj.P.Val),], 25)
top_genes <- signif.genes[order(signif.genes$adj.P.Val),]
top_genes <- fill_analyte_info(top_genes)
top_genes <- top_genes$Gene.name
msigdb_genes = select(msigdb_data, gs_name, gene_symbol)
enrich_msigdb <- enricher(top_genes, TERM2GENE = msigdb_genes)
enrich_msigdb_df <- enrich_msigdb@result %>%
separate(BgRatio, into=c("size.term","size.category"), sep="/") %>%
separate(GeneRatio, into=c("size.overlap.term", "size.overlap.category"), sep="/") %>%
mutate_at(vars("size.term","size.category", "size.overlap.term","size.overlap.category"), as.numeric) %>%
mutate("k.K"=size.overlap.term/size.term)
enrich_plot <- enrich_msigdb_df %>%
filter(p.adjust <= 0.05) %>%
ggplot(aes(x=reorder(Description, k.K), y=k.K)) +
geom_col() +
theme_classic() +
coord_flip() +
labs(y="Significant genes in set / Total genes in set \nk/K", x="Gene set",
title = paste("Differentially expressed genes enriched in", category, "Gene sets (P<0.05)"))
return(list(data = enrich_msigdb_df, plot = enrich_plot))
}
C2 = msigdb_workflow(reports_P03_Transformed_bcrsn$Set_3_limma, category = "C2")
C2$plot
C2 = msigdb_workflow(sig_adj, category = "C2")
C2$plot
sig_raw <- reports_P03_Transformed_bcrsn$Set_3_limma %>%
filter(P.Value < 0.05)
C2 = msigdb_workflow(sig_raw, category = "C2")
C2$plot
# OTHER
pp_box_plot_multi(lim, "Limma_Subset")
View(pp_box_plot_multi)
lim
View(limma_subset)
# OTHER
pp_box_plot_multi(limma_subset(P03_Transformed$Set_3), "Limma_Subset")
untrans <- untransform_subset(P03_Transformed$Set_3, P02_Merged$Set_3, subset_method = limma_subset, P = 0.05, mode = "default")
View(untrans)
pp_box_plot_multi(untrans, "untrans_limma")
library(ggplot2)
library(ggbreak)
install.packages("ggbreak")
library(ggplot2)
library(ggbreak)
pp_gg_box_plot_multi <- function(data, name){
# Transform data to long format
data_long <- tidyr::pivot_longer(data, -group, names_to="Variable", values_to="Value")
# Calculate upper limit for normal scale before break
upper_limit <- quantile(data_long$Value, 0.95)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(outlier.shape = NA) +   # Exclude outliers from boxplot
geom_point(position = position_jitter(width = 0.3), aes(color=group), alpha=0.7) +   # Show outliers as jittered points
facet_wrap(~Variable, scales="free_y") +
coord_trans_break(y="log10", breaks=c(upper_limit)) +  # Implement axis break and log transform
theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position="none")
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
}
pp_gg_box_plot_multi(untrans, "untrans_limma")
data = untrans
name = "untrans_boxes"
# Transform data to long format
data_long <- tidyr::pivot_longer(data, -group, names_to="Variable", values_to="Value")
head(data)
head(untrans)
data <- data[,-1]
# Transform data to long format
data_long <- tidyr::pivot_longer(data, -group, names_to="Variable", values_to="Value")
# Calculate upper limit for normal scale before break
upper_limit <- quantile(data_long$Value, 0.95)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(outlier.shape = NA) +   # Exclude outliers from boxplot
geom_point(position = position_jitter(width = 0.3), aes(color=group), alpha=0.7) +   # Show outliers as jittered points
facet_wrap(~Variable, scales="free_y") +
coord_trans_break(y="log10", breaks=c(upper_limit)) +  # Implement axis break and log transform
theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position="none")
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(outlier.shape = NA) +   # Exclude outliers from boxplot
geom_point(position = position_jitter(width = 0.3), aes(color=group), alpha=0.7) +   # Show outliers as jittered points
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position="none")
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value, color=factor(group))) +
geom_boxplot(outlier.shape = NA) +   # Exclude outliers from boxplot
geom_point(position = position_jitter(width = 0.3), aes(color=factor(group)), alpha=0.7) +   # Show outliers as jittered points
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
scale_color_manual(values = c("red", "blue"),
labels = c("Healthy Controls", "XFG Patients"),
name = "") +
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.9, 0.1),
legend.justification = c(1, 0),
legend.background = element_blank(),
legend.key = element_blank())
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(aes(group=group, fill=factor(group)), outlier.shape = NA, color="black") +  # Set the boxes to neutral color and outline them in black
geom_point(aes(color=factor(group)), position = position_jitter(width = 0.3), alpha=0.7) +  # Keep the points colored
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
scale_fill_manual(values = c("white", "white"), guide=FALSE) +  # Use white color for box fill and disable its legend
scale_color_manual(values = c("red", "blue"),
labels = c("Healthy Controls", "XFG Patients"),
name = "") +  # Retain previous color palette for the points
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.9, 0.1),
legend.justification = c(1, 0),
legend.background = element_blank(),
legend.key = element_blank())
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(outlier.shape = NA) +   # Exclude outliers from boxplot
geom_point(position = position_jitter(width = 0.3), aes(color=group), alpha=0.7) +   # Show outliers as jittered points
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
legend.position="none")
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(aes(group=group, fill=factor(group)), outlier.shape = NA, color="black") +  # Set the boxes to neutral color and outline them in black
geom_point(aes(color=factor(group)), position = position_jitter(width = 0.3), alpha=0.7) +  # Keep the points colored
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
scale_fill_manual(values = c("white", "white"), guide=FALSE) +  # Use white color for box fill and disable its legend
scale_color_manual(values = c("#E57373", "#4DB6AC"),
labels = c("Healthy Controls", "XFG Patients"),
name = "") +  # Return to the preferred colors
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.9, 0.1),
legend.justification = c(1, 0),
legend.background = element_blank(),
legend.key = element_blank())
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
pp_gg_box_plot_multi(untrans, "untrans_limma")
pp_gg_box_plot_multi <- function(data, name){
data <- data[,-1]
# Transform data to long format
data_long <- tidyr::pivot_longer(data, -group, names_to="Variable", values_to="Value")
# Calculate upper limit for normal scale before break
upper_limit <- quantile(data_long$Value, 0.95)
# Create the plot
p <- ggplot(data_long, aes(x=group, y=Value)) +
geom_boxplot(aes(group=group, fill=factor(group)), outlier.shape = NA, color="black") +  # Set the boxes to neutral color and outline them in black
geom_point(aes(color=factor(group)), position = position_jitter(width = 0.3), alpha=0.7) +  # Keep the points colored
facet_wrap(~Variable, scales="free_y") +
coord_trans(y="log10") +  # Implement log transform
theme_bw() +
scale_fill_manual(values = c("white", "white"), guide=FALSE) +  # Use white color for box fill and disable its legend
scale_color_manual(values = c("#E57373", "#4DB6AC"),
labels = c("Healthy Controls", "XFG Patients"),
name = "") +  # Return to the preferred colors
theme(strip.background = element_blank(),
strip.text = element_text(size=12, face="bold"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = c(0.9, 0.1),
legend.justification = c(1, 0),
legend.background = element_blank(),
legend.key = element_blank())
# Save the plot to a file
ggsave(filename = paste0(name, ".png"), plot = p, width = 10, height = 6)
}
pp_gg_box_plot_multi(untrans, "untrans_limma")
# Hallmark
H <- as.data.frame(msigdbr(
species = "Homo sapiens",
category = "C2"
))
H.ensembl.ls <- H %>%
# Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
# Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
# Convert to list
deframe()
true_gsea <- function(all_genes) {
library(msigdbr)
library(fgsea)
# Hallmark
H <- as.data.frame(msigdbr(
species = "Homo sapiens",
category = "C2"
))
H.ensembl.ls <- H %>%
# Keep gene ID that match expression data gene ID
select(gs_name, ensembl_gene) %>%
# Collapse all genes in each gene set into 1 row each
group_by(gs_name) %>%
summarise(all.genes = list(unique(ensembl_gene))) %>%
# Convert to list
deframe()
}
limma_results <- reports_P03_Transformed_bcrsn$Set_3_limma
# Calculate pi-value and add it as a new column to the dataframe
limma_results$pi_value <- with(limma_results, -log10(P.Value) * logFC)
limma_results_sorted <- limma_results[order(limma_results$pi_value), ]
anti_names <- row.names((limma_results_sorted))
gene_names <- unname(replace_antigen_names(anti_names, replacement_col = "ENSG.ID"))
limma_results_sorted["Gene"] <- gene_names
H.ensembl.ls
limma_results_sorted["Gene"] <- gene_names
limma_results_expanded <- limma_results_sorted %>%
separate_rows(Gene, sep = ",") %>%
mutate(Gene = trimws(Gene)) # Remove any whitespace
limma_results_expanded$pi_value <- limma_results_expanded$pi_value + runif(nrow(limma_results_expanded), min = -1e-10, max = 1e-10)
ranked_genes <- limma_results_expanded$pi_value
names(ranked_genes) <- limma_results_expanded$Gene
# Ensure ranked_genes does not have duplicates
ranked_genes <- ranked_genes[!duplicated(names(ranked_genes))]
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500, nperm = 1000)
install.packages("fgsea")
library(fgsea)
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes, minSize = 15, maxSize = 500, nperm = 1000)
overlap_counts <- sapply(H.ensembl.ls, function(gs) sum(gs %in% names(ranked_genes)))
sum(overlap_counts > 0)
ranked_genes
fgsea_results <- fgsea(pathways = H.ensembl.ls, stats = ranked_genes)
View(fgsea_results)
